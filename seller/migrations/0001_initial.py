# Generated by Django 4.1.2 on 2023-06-19 11:28

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("buyer", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Curator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "curator_nickname",
                    models.CharField(max_length=255, verbose_name="Ник куратора"),
                ),
                (
                    "curator_account",
                    models.CharField(max_length=255, verbose_name="Аккаунт куратора"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Seller",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Имя"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Фамилия"
                    ),
                ),
                (
                    "patronymic",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Отчество"
                    ),
                ),
                (
                    "birth_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Дата рождения"
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Пароль"
                    ),
                ),
                (
                    "shop_name",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Название магазина",
                    ),
                ),
                (
                    "shop_info",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Информация о магазине",
                    ),
                ),
                (
                    "account",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Аккаунт"
                    ),
                ),
                (
                    "shop_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Банковская карта", "Банковская карта"),
                            ("Электронные платежи", "Электронные платежи"),
                            ("Криптовалюта", "Криптовалюта"),
                        ],
                        default=None,
                        max_length=500,
                        null=True,
                        verbose_name="Тип магазина",
                    ),
                ),
                (
                    "shop_address",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=500,
                        null=True,
                        verbose_name="Адрес",
                    ),
                ),
                (
                    "shop_messanger_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=500,
                        null=True,
                        verbose_name="Наименование мессенджера",
                    ),
                ),
                (
                    "payment",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Банковская карта", "Банковская карта"),
                            ("Электронные платежи", "Электронные платежи"),
                            ("Криптовалюта", "Криптовалюта"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Способ оплаты",
                    ),
                ),
                (
                    "crime_place",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Кандалакшский района", "Кандалакшский района"),
                            ("Ковдорский район", "Ковдорский район"),
                            ("Кольский район", "Кольский район"),
                            ("Ловозерский район", "Ловозерский район"),
                            ("Печенгский район", "Печенгский район"),
                            ("Терский район", "Терский район"),
                            ("город Мурманск", "город Мурманск"),
                            (
                                "город Апатиты с подведомственной территорией",
                                "город Апатиты с подведомственной территорией",
                            ),
                            (
                                "ород Кировск с подведомственной территорией",
                                "город Кировск с подведомственной территорией",
                            ),
                            (
                                "город Оленегорск с подведомственной территорией",
                                "город Оленегорск с подведомственной территорией",
                            ),
                            (
                                "город Полярные Зори с подведомственной территорией",
                                "город Полярные Зори с подведомственной территорией",
                            ),
                            ("ЗАТО посёлок Видяево", "ЗАТО посёлок Видяево"),
                            ("ЗАТО город Заозёрск", "ЗАТО город Заозёрск"),
                            ("ЗАТО город Островной", "ЗАТО город Островной"),
                            ("ЗАТО город Североморск", "ЗАТО город Североморск"),
                            ("ЗАТО Александровск", "ЗАТО Александровск"),
                            (
                                "город Мончегорск с подведомственной территорией",
                                "город Мончегорск с подведомственной территорией",
                            ),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Место совершения преступления",
                    ),
                ),
                (
                    "arrest_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Дата арреста"
                    ),
                ),
                (
                    "master_clad_coordinates",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "clad_coordinates",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "banks",
                    models.ManyToManyField(
                        blank=True, related_name="seller_buyers", to="buyer.bank"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerStuff",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mobile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="buyer.stuff"
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerMobileNumber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mobile_number",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buyer.mobilenumber",
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerMobile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "mobile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="buyer.mobile"
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerMasterClads",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "buyer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
                (
                    "clad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="buyer.clad"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerInternerAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "internet_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="buyer.internetaccount",
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerCurator",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "curator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.curator"
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SellerClads",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "buyer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="seller.seller"
                    ),
                ),
                (
                    "clad",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="buyer.clad"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="seller",
            name="clads",
            field=models.ManyToManyField(through="seller.SellerClads", to="buyer.clad"),
        ),
        migrations.AddField(
            model_name="seller",
            name="cryptos",
            field=models.ManyToManyField(
                blank=True, related_name="seller_buyers", to="buyer.crypto"
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="curators",
            field=models.ManyToManyField(
                through="seller.SellerCurator", to="seller.curator"
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="interner_accounts",
            field=models.ManyToManyField(
                through="seller.SellerInternerAccount", to="buyer.internetaccount"
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="master_clads",
            field=models.ManyToManyField(
                related_name="seller_master_clads",
                through="seller.SellerMasterClads",
                to="buyer.clad",
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="mobile_numbers",
            field=models.ManyToManyField(
                default=None,
                related_name="seller_mobile_numbers",
                through="seller.SellerMobileNumber",
                to="buyer.mobilenumber",
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="mobiles",
            field=models.ManyToManyField(
                default=None,
                related_name="seller_mobiles",
                through="seller.SellerMobile",
                to="buyer.mobile",
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="online_pays",
            field=models.ManyToManyField(
                blank=True, related_name="seller_buyers", to="buyer.onlinepay"
            ),
        ),
        migrations.AddField(
            model_name="seller",
            name="stuffs",
            field=models.ManyToManyField(
                related_name="seller_stuffs",
                through="seller.SellerStuff",
                to="buyer.stuff",
            ),
        ),
        migrations.CreateModel(
            name="PhotoMasterClad",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("describe", models.CharField(max_length=255)),
                ("image", models.ImageField(upload_to="")),
                (
                    "buyer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="seller.seller",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PhotoClad",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("describe", models.CharField(max_length=255)),
                ("image", models.ImageField(upload_to="")),
                (
                    "buyer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="seller.seller",
                    ),
                ),
            ],
        ),
    ]
